package com.hyl.mq.helper.consumer;

import com.hyl.mq.helper.annotation.HpRabbitListener;
import com.hyl.mq.helper.util.AnnotationUtil;
import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.aop.support.AopUtils;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.config.SmartInstantiationAwareBeanPostProcessor;
import org.springframework.core.Ordered;
import org.springframework.core.annotation.AnnotationUtils;
import org.springframework.util.Assert;
import org.springframework.util.ReflectionUtils;

import java.lang.reflect.Field;
import java.util.Map;
import java.util.Set;

/**
 * @author huayuanlin
 * @date 2021/09/15 16:31
 * @desc This post processor is used to annotate @HpRabbitListener and copy the annotated attributes of HpRabbitListener to @RabbitListener,
 * so that the configured attributes can be scanned in the scanner in RabbitListener;
 * so @HpRabbitListener is equal to @RabbitListener in a certain sense
 * @see HpRabbitListener,RabbitListener
 */
public class HpRabbitConsumerBeanPostProcessor implements SmartInstantiationAwareBeanPostProcessor, Ordered {


    @Override
    public Object postProcessBeforeInitialization(final Object bean, final String beanName) throws BeansException {
        Class<?> targetClass = AopUtils.getTargetClass(bean);
        ReflectionUtils.doWithLocalMethods(targetClass, method -> {
            HpRabbitListener hpRabbitListener = AnnotationUtils.findAnnotation(method, HpRabbitListener.class);
            RabbitListener rabbitListener = AnnotationUtils.findAnnotation(method, RabbitListener.class);
            if (hpRabbitListener == null || rabbitListener == null) {
                return;
            }
            Set<String> queueNames = AnnotationUtil.resolveQueueNames(hpRabbitListener);
            // Put the consumer method into the context to facilitate the compensation logic
            MqConsumerHolderContext.registerHolder(queueNames, method, bean);
            // Copy the properties of HpRabbitListener to RabbitListener
            Map<String, Object> memberValuesMap = getAnnotationMembers(rabbitListener.getClass(), rabbitListener);
            Map<String, Object> hpMemberValuesMap = getAnnotationMembers(hpRabbitListener.getClass(), hpRabbitListener);
            memberValuesMap.putAll(hpMemberValuesMap);
        });
        return bean;
    }


    @SuppressWarnings("unchecked")
    private Map<String, Object> getAnnotationMembers(Class<?> annotation, Object enumObj)
            throws IllegalAccessException {
        Field proxyHandler = ReflectionUtils.findField(annotation, "h");
        Assert.notNull(proxyHandler, "unknown null");
        ReflectionUtils.makeAccessible(proxyHandler);
        Object proxyHandlerValue = proxyHandler.get(enumObj);
        // The annotation here is generally a proxy class generated by spring for us (used to handle alias situations)
        // @see SynthesizedAnnotationInvocationHandler
        Field valueCache = ReflectionUtils.findField(proxyHandlerValue.getClass(), "valueCache");
        // If not found, get it from the default proxy of the annotation
        // @see sun.reflect.annotation.AnnotationInvocationHandler
        if (valueCache == null) {
            valueCache = ReflectionUtils.findField(proxyHandlerValue.getClass(), "memberValues");
        }
        Assert.notNull(valueCache, "unknown null");
        ReflectionUtils.makeAccessible(valueCache);
        return (Map<String, Object>) valueCache.get(proxyHandlerValue);
    }

    @Override
    public int getOrder() {
        // priority is greater than:org.springframework.amqp.rabbit.annotation.RabbitListenerAnnotationBeanPostProcessor bean
        return HIGHEST_PRECEDENCE;
    }
}
